const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase (usando vari√°veis de produ√ß√£o)
const supabaseUrl = 'https://envqimsupjgovuofbghj.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVudnFpbXN1cGpnb3Z1b2ZiZ2hqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc4MTEyMzQsImV4cCI6MjA3MzM4NzIzNH0.5OJAgPbqiTEomwuMzOfisow2G1m2wVxZ3nGIkekTNjU';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkUserTables() {
  console.log('üîç Verificando tabelas de usu√°rios na base de dados...\n');

  try {
    // 1. Verificar se existe tabela de usu√°rios
    console.log('üìã 1. Verificando estrutura das tabelas...');
    
    // Tentar buscar tabelas relacionadas a usu√°rios
    const tables = ['users', 'profiles', 'auth.users', 'demo_users'];
    
    for (const table of tables) {
      try {
        console.log(`   Verificando tabela: ${table}`);
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`   ‚ùå Tabela ${table} n√£o encontrada ou sem acesso: ${error.message}`);
        } else {
          console.log(`   ‚úÖ Tabela ${table} encontrada!`);
          console.log(`   üìä Estrutura: ${JSON.stringify(data, null, 2)}`);
        }
      } catch (err) {
        console.log(`   ‚ùå Erro ao acessar ${table}: ${err.message}`);
      }
    }

    // 2. Verificar tabelas existentes no schema p√∫blico
    console.log('\nüìã 2. Listando todas as tabelas dispon√≠veis...');
    try {
      const { data: tables, error } = await supabase.rpc('get_table_names');
      if (error) {
        console.log('   ‚ùå N√£o foi poss√≠vel listar tabelas via RPC');
      } else {
        console.log('   ‚úÖ Tabelas encontradas via RPC:', tables);
      }
    } catch (err) {
      console.log('   ‚ùå RPC get_table_names n√£o dispon√≠vel');
    }

    // 3. Verificar tabelas conhecidas do sistema
    console.log('\nüìã 3. Verificando tabelas conhecidas do sistema...');
    const knownTables = ['patients', 'events', 'family_access_tokens'];
    
    for (const table of knownTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`   ‚ùå ${table}: ${error.message}`);
        } else {
          console.log(`   ‚úÖ ${table}: OK (${data?.length || 0} registros encontrados)`);
        }
      } catch (err) {
        console.log(`   ‚ùå ${table}: ${err.message}`);
      }
    }

    // 4. Tentar criar um usu√°rio de teste (se houver tabela apropriada)
    console.log('\nüë§ 4. Testando cria√ß√£o de usu√°rio...');
    
    // Primeiro, verificar se podemos usar auth.users
    try {
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: 'teste-' + Date.now() + '@example.com',
        password: 'teste123456'
      });
      
      if (authError) {
        console.log(`   ‚ùå Erro no signup via auth: ${authError.message}`);
      } else {
        console.log('   ‚úÖ Usu√°rio criado via auth.signUp!');
        console.log(`   üìß Email: ${authData.user?.email}`);
        console.log(`   üÜî ID: ${authData.user?.id}`);
        
        // Tentar remover o usu√°rio de teste
        if (authData.user?.id) {
          try {
            const { error: deleteError } = await supabase.auth.admin.deleteUser(authData.user.id);
            if (deleteError) {
              console.log(`   ‚ö†Ô∏è  N√£o foi poss√≠vel remover usu√°rio de teste: ${deleteError.message}`);
            } else {
              console.log('   üóëÔ∏è  Usu√°rio de teste removido');
            }
          } catch (err) {
            console.log(`   ‚ö†Ô∏è  Erro ao remover usu√°rio de teste: ${err.message}`);
          }
        }
      }
    } catch (err) {
      console.log(`   ‚ùå Erro geral no teste de auth: ${err.message}`);
    }

    // 5. Verificar se existe uma tabela customizada de usu√°rios
    console.log('\nüîç 5. Procurando por tabelas customizadas de usu√°rios...');
    const customUserTables = ['app_users', 'system_users', 'hospital_users', 'staff'];
    
    for (const table of customUserTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (!error) {
          console.log(`   ‚úÖ Tabela customizada encontrada: ${table}`);
          console.log(`   üìä Exemplo de dados: ${JSON.stringify(data, null, 2)}`);
        }
      } catch (err) {
        // Ignorar erros para tabelas que n√£o existem
      }
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

async function checkDemoUsers() {
  console.log('\nüé≠ Verificando usu√°rios demo no localStorage...');
  
  // Simular verifica√ß√£o do localStorage (n√£o dispon√≠vel no Node.js)
  console.log('   ‚ÑπÔ∏è  Usu√°rios demo s√£o armazenados apenas no localStorage do navegador');
  console.log('   ‚ÑπÔ∏è  Para verificar, abra o DevTools do navegador e execute:');
  console.log('   üìù localStorage.getItem("demo_users")');
}

async function main() {
  console.log('üöÄ Iniciando verifica√ß√£o de cria√ß√£o de usu√°rios...\n');
  
  await checkUserTables();
  await checkDemoUsers();
  
  console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
  console.log('\nüìã Resumo:');
  console.log('   ‚Ä¢ Usu√°rios demo: Armazenados no localStorage (n√£o na base de dados)');
  console.log('   ‚Ä¢ Usu√°rios do sistema: Verificar se auth.users est√° configurado');
  console.log('   ‚Ä¢ Pacientes: Armazenados na tabela "patients" (funcionando)');
}

main().catch(console.error);