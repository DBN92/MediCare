#!/usr/bin/env node

/**
 * CORRE√á√ÉO EMERGENCIAL RLS - MEDICAL_RECORDS
 * Sistema MediCare - Corre√ß√£o Autom√°tica de Pol√≠ticas RLS
 * 
 * Este script corrige automaticamente as pol√≠ticas RLS da tabela medical_records
 * para resolver o erro 42501 (viola√ß√£o de pol√≠tica RLS)
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes do Supabase (produ√ß√£o)
function loadSupabaseConfig() {
  return {
    url: 'https://envqimsupjgovuofbghj.supabase.co',
    key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVudnFpbXN1cGpnb3Z1b2ZiZ2hqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc4MTEyMzQsImV4cCI6MjA3MzM4NzIzNH0.5OJAgPbqiTEomwuMzOfisow2G1m2wVxZ3nGIkekTNjU'
  };
}

async function fixMedicalRecordsRLS() {
  console.log('üö® CORRE√á√ÉO EMERGENCIAL RLS - MEDICAL_RECORDS');
  console.log('=' .repeat(60));
  
  // Carregar configura√ß√µes
  const config = loadSupabaseConfig();
  if (!config || !config.url || !config.key) {
    console.error('‚ùå Configura√ß√µes do Supabase n√£o encontradas');
    console.log('üí° Verifique se o arquivo client.ts existe ou configure as vari√°veis de ambiente');
    return;
  }
  
  console.log('‚úÖ Configura√ß√µes carregadas');
  console.log('üîó URL:', config.url);
  
  // Criar cliente Supabase
  const supabase = createClient(config.url, config.key);
  
  try {
    console.log('\nüîç DIAGN√ìSTICO INICIAL');
    console.log('-'.repeat(40));
    
    // Verificar se a tabela existe
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'medical_records');
    
    if (tablesError) {
      console.error('‚ùå Erro ao verificar tabelas:', tablesError.message);
      return;
    }
    
    if (!tables || tables.length === 0) {
      console.error('‚ùå Tabela medical_records n√£o encontrada');
      return;
    }
    
    console.log('‚úÖ Tabela medical_records encontrada');
    
    // Verificar pol√≠ticas RLS existentes
    console.log('\nüîç Verificando pol√≠ticas RLS existentes...');
    const { data: policies, error: policiesError } = await supabase.rpc('get_policies', {
      table_name: 'medical_records'
    });
    
    if (policies && policies.length > 0) {
      console.log('üìã Pol√≠ticas encontradas:', policies.length);
      policies.forEach(policy => {
        console.log(`  - ${policy.policyname} (${policy.cmd})`);
      });
    } else {
      console.log('‚ö†Ô∏è  Nenhuma pol√≠tica RLS encontrada');
    }
    
    console.log('\nüõ†Ô∏è  APLICANDO CORRE√á√ÉO RLS');
    console.log('-'.repeat(40));
    
    // Script SQL de corre√ß√£o
    const fixSQL = `
      -- Remover todas as pol√≠ticas RLS existentes
      DROP POLICY IF EXISTS "Users can view medical records they created" ON medical_records;
      DROP POLICY IF EXISTS "Users can create medical records" ON medical_records;
      DROP POLICY IF EXISTS "Users can update medical records they created" ON medical_records;
      DROP POLICY IF EXISTS "Users can delete medical records they created" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_select_policy" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_insert_policy" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_update_policy" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_delete_policy" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_select" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_insert" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_update" ON medical_records;
      DROP POLICY IF EXISTS "medical_records_delete" ON medical_records;
      DROP POLICY IF EXISTS "Enable read access for users based on doctor_id" ON medical_records;
      DROP POLICY IF EXISTS "Enable insert for users based on doctor_id" ON medical_records;
      DROP POLICY IF EXISTS "Enable update for users based on doctor_id" ON medical_records;
      DROP POLICY IF EXISTS "Enable delete for users based on doctor_id" ON medical_records;
      
      -- Garantir que RLS est√° habilitado
      ALTER TABLE medical_records ENABLE ROW LEVEL SECURITY;
      
      -- Criar pol√≠ticas RLS corretas
      CREATE POLICY "medical_records_select_fixed" ON medical_records
          FOR SELECT USING (doctor_id = auth.uid());
      
      CREATE POLICY "medical_records_insert_fixed" ON medical_records
          FOR INSERT WITH CHECK (doctor_id = auth.uid());
      
      CREATE POLICY "medical_records_update_fixed" ON medical_records
          FOR UPDATE USING (doctor_id = auth.uid());
      
      CREATE POLICY "medical_records_delete_fixed" ON medical_records
          FOR DELETE USING (doctor_id = auth.uid());
    `;
    
    // Executar corre√ß√£o
    const { error: fixError } = await supabase.rpc('exec_sql', { sql: fixSQL });
    
    if (fixError) {
      console.error('‚ùå Erro ao aplicar corre√ß√£o:', fixError.message);
      
      // Tentar m√©todo alternativo - executar comandos individualmente
      console.log('\nüîÑ Tentando m√©todo alternativo...');
      
      const commands = [
        'ALTER TABLE medical_records ENABLE ROW LEVEL SECURITY',
        `CREATE POLICY "medical_records_select_fixed" ON medical_records FOR SELECT USING (doctor_id = auth.uid())`,
        `CREATE POLICY "medical_records_insert_fixed" ON medical_records FOR INSERT WITH CHECK (doctor_id = auth.uid())`,
        `CREATE POLICY "medical_records_update_fixed" ON medical_records FOR UPDATE USING (doctor_id = auth.uid())`,
        `CREATE POLICY "medical_records_delete_fixed" ON medical_records FOR DELETE USING (doctor_id = auth.uid())`
      ];
      
      for (const command of commands) {
        try {
          await supabase.rpc('exec_sql', { sql: command });
          console.log('‚úÖ', command.substring(0, 50) + '...');
        } catch (err) {
          console.log('‚ö†Ô∏è ', command.substring(0, 50) + '...', err.message);
        }
      }
    } else {
      console.log('‚úÖ Corre√ß√£o aplicada com sucesso');
    }
    
    console.log('\nüîç VERIFICA√á√ÉO FINAL');
    console.log('-'.repeat(40));
    
    // Verificar se as pol√≠ticas foram criadas
    const { data: newPolicies } = await supabase.rpc('get_policies', {
      table_name: 'medical_records'
    });
    
    if (newPolicies && newPolicies.length > 0) {
      console.log('‚úÖ Pol√≠ticas RLS criadas:');
      newPolicies.forEach(policy => {
        console.log(`  ‚úì ${policy.policyname} (${policy.cmd})`);
      });
    }
    
    console.log('\nüéâ CORRE√á√ÉO CONCLU√çDA');
    console.log('=' .repeat(60));
    console.log('‚úÖ As pol√≠ticas RLS foram corrigidas');
    console.log('üîÑ Tente criar um prontu√°rio m√©dico novamente');
    console.log('üìù O erro 42501 deve ter sido resolvido');
    
  } catch (error) {
    console.error('\n‚ùå ERRO DURANTE A CORRE√á√ÉO');
    console.error('Erro:', error.message);
    console.error('Stack:', error.stack);
    
    console.log('\nüí° SOLU√á√ÉO MANUAL');
    console.log('Execute este SQL no Supabase Dashboard:');
    console.log(`
-- Habilitar RLS
ALTER TABLE medical_records ENABLE ROW LEVEL SECURITY;

-- Criar pol√≠ticas b√°sicas
CREATE POLICY "medical_records_select_manual" ON medical_records
    FOR SELECT USING (doctor_id = auth.uid());

CREATE POLICY "medical_records_insert_manual" ON medical_records
    FOR INSERT WITH CHECK (doctor_id = auth.uid());
    `);
  }
}

// Executar corre√ß√£o
if (require.main === module) {
  fixMedicalRecordsRLS().catch(console.error);
}

module.exports = { fixMedicalRecordsRLS };