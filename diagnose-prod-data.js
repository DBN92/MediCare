const url = 'http://supabasekong-o48k40w0koggco4ocok4gs0o.31.97.64.167.sslip.io';
const key = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc1NzM2MDgyMCwiZXhwIjo0OTEzMDM0NDIwLCJyb2xlIjoiYW5vbiJ9.mDC5HL6lFytb7Y0lowHRS0PBiQwpFXxXfIBe3UNx6oA';

console.log('üîç DIAGN√ìSTICO COMPLETO - Dados n√£o aparecem em produ√ß√£o');
console.log('=' .repeat(60));

async function fullDiagnosis() {
  try {
    // ========================================
    // 1. TESTE DE CONECTIVIDADE B√ÅSICA
    // ========================================
    console.log('\nüì° 1. TESTANDO CONECTIVIDADE B√ÅSICA...');
    const basicResponse = await fetch(url + '/rest/v1/', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    if (basicResponse.ok) {
      console.log('‚úÖ Conex√£o com Supabase: OK');
    } else {
      console.log('‚ùå Conex√£o com Supabase: FALHOU');
      console.log('Status:', basicResponse.status);
      return;
    }

    // ========================================
    // 2. VERIFICAR ESTRUTURA DAS TABELAS
    // ========================================
    console.log('\nüóÇÔ∏è  2. VERIFICANDO ESTRUTURA DAS TABELAS...');
    
    const tables = ['patients', 'care_events', 'events', 'profiles', 'demo_users'];
    
    for (const table of tables) {
      try {
        const response = await fetch(url + `/rest/v1/${table}?select=*&limit=1`, {
          headers: {
            'apikey': key,
            'Authorization': 'Bearer ' + key
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log(`‚úÖ Tabela ${table}: Existe (${data.length} registros na amostra)`);
        } else if (response.status === 404) {
          console.log(`‚ùå Tabela ${table}: N√ÉO EXISTE`);
        } else {
          console.log(`‚ö†Ô∏è  Tabela ${table}: Erro ${response.status} - ${await response.text()}`);
        }
      } catch (error) {
        console.log(`‚ùå Tabela ${table}: Erro - ${error.message}`);
      }
    }

    // ========================================
    // 3. CONTAR REGISTROS EM CADA TABELA
    // ========================================
    console.log('\nüìä 3. CONTANDO REGISTROS...');
    
    for (const table of tables) {
      try {
        const response = await fetch(url + `/rest/v1/${table}?select=*`, {
          headers: {
            'apikey': key,
            'Authorization': 'Bearer ' + key,
            'Prefer': 'count=exact'
          }
        });
        
        if (response.ok) {
          const countHeader = response.headers.get('content-range');
          const count = countHeader ? countHeader.split('/')[1] : 'desconhecido';
          console.log(`üìà ${table}: ${count} registros`);
        } else {
          console.log(`‚ùå ${table}: Erro ${response.status}`);
        }
      } catch (error) {
        console.log(`‚ùå ${table}: Erro - ${error.message}`);
      }
    }

    // ========================================
    // 4. TESTAR AUTENTICA√á√ÉO
    // ========================================
    console.log('\nüîê 4. TESTANDO AUTENTICA√á√ÉO...');
    
    const authResponse = await fetch(url + '/auth/v1/user', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    if (authResponse.ok) {
      const authData = await authResponse.json();
      console.log('‚úÖ Endpoint de autentica√ß√£o: Acess√≠vel');
      console.log('üë§ Usu√°rio atual:', authData.id || 'N√£o autenticado');
    } else {
      console.log('‚ö†Ô∏è  Endpoint de autentica√ß√£o:', authResponse.status);
      console.log('üìù Resposta:', await authResponse.text());
    }

    // ========================================
    // 5. TESTAR POL√çTICAS RLS
    // ========================================
    console.log('\nüõ°Ô∏è  5. TESTANDO POL√çTICAS RLS...');
    
    // Teste sem autentica√ß√£o (deve falhar se RLS estiver ativo)
    const rlsTestResponse = await fetch(url + '/rest/v1/patients?select=*&limit=1', {
      headers: {
        'apikey': key
        // Sem Authorization header
      }
    });
    
    if (rlsTestResponse.ok) {
      console.log('‚ö†Ô∏è  RLS: Pode estar DESABILITADO (dados acess√≠veis sem auth)');
    } else if (rlsTestResponse.status === 401) {
      console.log('‚úÖ RLS: ATIVO (requer autentica√ß√£o)');
    } else {
      console.log('‚ùì RLS: Status unclear -', rlsTestResponse.status);
    }

    // ========================================
    // 6. VERIFICAR DADOS DE EXEMPLO
    // ========================================
    console.log('\nüìã 6. VERIFICANDO DADOS DE EXEMPLO...');
    
    const sampleResponse = await fetch(url + '/rest/v1/patients?select=id,name,full_name,created_at,created_by,user_id&limit=3', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    if (sampleResponse.ok) {
      const sampleData = await sampleResponse.json();
      console.log('üìä Amostra de pacientes:');
      sampleData.forEach((patient, index) => {
        console.log(`  ${index + 1}. ID: ${patient.id}`);
        console.log(`     Nome: ${patient.name || patient.full_name || 'N/A'}`);
        console.log(`     Criado em: ${patient.created_at || 'N/A'}`);
        console.log(`     Criado por: ${patient.created_by || patient.user_id || 'N/A'}`);
        console.log('');
      });
    } else {
      console.log('‚ùå Erro ao buscar dados de exemplo:', sampleResponse.status);
      console.log('üìù Resposta:', await sampleResponse.text());
    }

    // ========================================
    // 7. VERIFICAR CARE_EVENTS
    // ========================================
    console.log('\nüè• 7. VERIFICANDO CARE_EVENTS...');
    
    const eventsResponse = await fetch(url + '/rest/v1/care_events?select=id,patient_id,event_type,created_at&limit=3', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    if (eventsResponse.ok) {
      const eventsData = await eventsResponse.json();
      console.log('üìä Amostra de eventos de cuidado:');
      eventsData.forEach((event, index) => {
        console.log(`  ${index + 1}. ID: ${event.id}`);
        console.log(`     Paciente: ${event.patient_id}`);
        console.log(`     Tipo: ${event.event_type || 'N/A'}`);
        console.log(`     Criado em: ${event.created_at || 'N/A'}`);
        console.log('');
      });
    } else {
      console.log('‚ùå Erro ao buscar eventos:', eventsResponse.status);
      console.log('üìù Resposta:', await eventsResponse.text());
    }

    // ========================================
    // 8. RESUMO E RECOMENDA√á√ïES
    // ========================================
    console.log('\nüìã 8. RESUMO E RECOMENDA√á√ïES');
    console.log('=' .repeat(60));
    console.log('');
    console.log('üîç POSS√çVEIS CAUSAS DOS DADOS N√ÉO APARECEREM:');
    console.log('');
    console.log('1. üîê AUTENTICA√á√ÉO:');
    console.log('   - Usu√°rio n√£o est√° logado em produ√ß√£o');
    console.log('   - Token de sess√£o expirado');
    console.log('   - Diferen√ßas entre auth local vs produ√ß√£o');
    console.log('');
    console.log('2. üõ°Ô∏è  POL√çTICAS RLS:');
    console.log('   - Dados existem mas RLS bloqueia acesso');
    console.log('   - Usu√°rio n√£o tem permiss√£o para ver os dados');
    console.log('   - Pol√≠ticas RLS mal configuradas');
    console.log('');
    console.log('3. üìä DADOS:');
    console.log('   - Dados n√£o foram migrados para produ√ß√£o');
    console.log('   - Dados est√£o associados a outros usu√°rios');
    console.log('   - Estrutura do banco diferente');
    console.log('');
    console.log('üõ†Ô∏è  PR√ìXIMOS PASSOS RECOMENDADOS:');
    console.log('');
    console.log('1. Verificar console do navegador em produ√ß√£o (F12)');
    console.log('2. Testar login/logout em produ√ß√£o');
    console.log('3. Verificar se h√° dados no Supabase Dashboard');
    console.log('4. Executar script de corre√ß√£o RLS se necess√°rio');
    console.log('5. Comparar estrutura do banco local vs produ√ß√£o');

  } catch (error) {
    console.error('‚ùå ERRO GERAL NO DIAGN√ìSTICO:', error.message);
  }
}

fullDiagnosis();