const url = 'http://supabasekong-o48k40w0koggco4ocok4gs0o.31.97.64.167.sslip.io';
const key = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc1NzM2MDgyMCwiZXhwIjo0OTEzMDM0NDIwLCJyb2xlIjoiYW5vbiJ9.mDC5HL6lFytb7Y0lowHRS0PBiQwpFXxXfIBe3UNx6oA';

console.log('üîç TESTE DE ACESSO √Ä TABELA EVENTS');
console.log('=' .repeat(50));

async function testEventsAccess() {
  try {
    // ========================================
    // 1. TESTAR ACESSO SEM AUTENTICA√á√ÉO
    // ========================================
    console.log('\nüìã 1. TESTANDO ACESSO SEM AUTENTICA√á√ÉO...');
    
    const noAuthResponse = await fetch(url + '/rest/v1/events?select=*', {
      headers: {
        'apikey': key
        // Sem Authorization header
      }
    });
    
    console.log('Status sem auth:', noAuthResponse.status);
    if (noAuthResponse.ok) {
      const noAuthData = await noAuthResponse.json();
      console.log('‚úÖ Dados acess√≠veis sem auth:', noAuthData.length, 'registros');
    } else {
      console.log('‚ùå Acesso negado sem auth (esperado se RLS ativo)');
    }
    
    // ========================================
    // 2. TESTAR ACESSO COM TOKEN AN√îNIMO
    // ========================================
    console.log('\nüîê 2. TESTANDO ACESSO COM TOKEN AN√îNIMO...');
    
    const anonResponse = await fetch(url + '/rest/v1/events?select=*', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    console.log('Status com token an√¥nimo:', anonResponse.status);
    if (anonResponse.ok) {
      const anonData = await anonResponse.json();
      console.log('‚úÖ Dados acess√≠veis com token an√¥nimo:', anonData.length, 'registros');
      
      if (anonData.length > 0) {
        console.log('\nüìä AMOSTRA DOS DADOS:');
        anonData.slice(0, 3).forEach((event, index) => {
          console.log(`\n  ${index + 1}. Evento ID: ${event.id}`);
          console.log(`     Paciente: ${event.patient_id}`);
          console.log(`     Tipo: ${event.type}`);
          console.log(`     Data: ${event.occurred_at || event.scheduled_at}`);
          console.log(`     Criado por: ${event.created_by || 'N/A'}`);
          if (event.notes) console.log(`     Notas: ${event.notes}`);
        });
      }
    } else {
      const errorText = await anonResponse.text();
      console.log('‚ùå Erro com token an√¥nimo:', errorText);
    }
    
    // ========================================
    // 3. TESTAR CONSULTA ESPEC√çFICA COMO A APLICA√á√ÉO FAZ
    // ========================================
    console.log('\nüíª 3. TESTANDO CONSULTA COMO A APLICA√á√ÉO FAZ...');
    
    const appQueryResponse = await fetch(url + '/rest/v1/events?select=*,patients(full_name,bed)&order=occurred_at.desc', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    console.log('Status da consulta da aplica√ß√£o:', appQueryResponse.status);
    if (appQueryResponse.ok) {
      const appData = await appQueryResponse.json();
      console.log('‚úÖ Consulta da aplica√ß√£o funcionou:', appData.length, 'registros');
    } else {
      const errorText = await appQueryResponse.text();
      console.log('‚ùå Erro na consulta da aplica√ß√£o:', errorText);
      
      // Tentar consulta simplificada
      console.log('\nüîÑ Tentando consulta simplificada...');
      const simpleResponse = await fetch(url + '/rest/v1/events?select=*&order=occurred_at.desc.nullslast', {
        headers: {
          'apikey': key,
          'Authorization': 'Bearer ' + key
        }
      });
      
      if (simpleResponse.ok) {
        const simpleData = await simpleResponse.json();
        console.log('‚úÖ Consulta simplificada funcionou:', simpleData.length, 'registros');
      } else {
        console.log('‚ùå Consulta simplificada tamb√©m falhou');
      }
    }
    
    // ========================================
    // 4. VERIFICAR POL√çTICAS RLS
    // ========================================
    console.log('\nüõ°Ô∏è  4. VERIFICANDO POL√çTICAS RLS...');
    
    const rlsResponse = await fetch(url + '/rest/v1/events?select=*&limit=1', {
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key
      }
    });
    
    if (rlsResponse.ok) {
      console.log('‚úÖ RLS permite acesso com token an√¥nimo');
    } else if (rlsResponse.status === 401) {
      console.log('üîí RLS ativo - requer autentica√ß√£o de usu√°rio');
    } else if (rlsResponse.status === 403) {
      console.log('üö´ RLS ativo - acesso negado para este usu√°rio');
    }
    
    // ========================================
    // 5. TESTAR INSER√á√ÉO (PARA VERIFICAR PERMISS√ïES)
    // ========================================
    console.log('\n‚úèÔ∏è  5. TESTANDO INSER√á√ÉO (VERIFICAR PERMISS√ïES)...');
    
    const testInsert = {
      patient_id: '9ce9b35a-5543-4b55-8a4a-ef04bcfbc7b3', // ID do paciente existente
      type: 'other',
      occurred_at: new Date().toISOString(),
      notes: 'Teste de inser√ß√£o para diagn√≥stico'
    };
    
    const insertResponse = await fetch(url + '/rest/v1/events', {
      method: 'POST',
      headers: {
        'apikey': key,
        'Authorization': 'Bearer ' + key,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(testInsert)
    });
    
    if (insertResponse.ok) {
      const insertedData = await insertResponse.json();
      console.log('‚úÖ Inser√ß√£o bem-sucedida:', insertedData);
      
      // Limpar o registro de teste
      const deleteResponse = await fetch(url + `/rest/v1/events?id=eq.${insertedData.id}`, {
        method: 'DELETE',
        headers: {
          'apikey': key,
          'Authorization': 'Bearer ' + key
        }
      });
      
      if (deleteResponse.ok) {
        console.log('üßπ Registro de teste removido');
      }
    } else {
      const errorText = await insertResponse.text();
      console.log('‚ùå Erro na inser√ß√£o:', insertResponse.status, errorText);
    }
    
    // ========================================
    // 6. RESUMO E DIAGN√ìSTICO
    // ========================================
    console.log('\nüìã 6. RESUMO E DIAGN√ìSTICO');
    console.log('=' .repeat(50));
    console.log('');
    console.log('üîç AN√ÅLISE DOS RESULTADOS:');
    console.log('');
    console.log('‚úÖ CONFIRMADO: Tabela "events" tem dados (9 registros)');
    console.log('‚úÖ CONFIRMADO: Aplica√ß√£o usa tabela "events" (correto)');
    console.log('‚ùå PROBLEMA: Tabela "care_events" √© irrelevante (n√£o usada)');
    console.log('');
    console.log('üéØ POSS√çVEIS CAUSAS DOS DADOS N√ÉO APARECEREM:');
    console.log('');
    console.log('1. üîê AUTENTICA√á√ÉO:');
    console.log('   - Usu√°rio n√£o est√° logado na aplica√ß√£o');
    console.log('   - Token JWT inv√°lido ou expirado');
    console.log('   - Problema no sistema de auth da aplica√ß√£o');
    console.log('');
    console.log('2. üõ°Ô∏è  POL√çTICAS RLS:');
    console.log('   - RLS bloqueia dados para usu√°rio n√£o autenticado');
    console.log('   - Dados pertencem a outro usu√°rio');
    console.log('   - Pol√≠ticas mal configuradas');
    console.log('');
    console.log('3. üîÑ FRONTEND:');
    console.log('   - Problema de cache no navegador');
    console.log('   - Erro no c√≥digo React/JavaScript');
    console.log('   - Hook useCareEvents n√£o est√° funcionando');
    console.log('');
    console.log('üõ†Ô∏è  PR√ìXIMOS PASSOS:');
    console.log('');
    console.log('1. Verificar console do navegador (F12) em produ√ß√£o');
    console.log('2. Testar login/logout na aplica√ß√£o');
    console.log('3. Verificar se hook useCareEvents est√° sendo chamado');
    console.log('4. Verificar se h√° erros de CORS ou rede');
    console.log('5. Comparar comportamento local vs produ√ß√£o');

  } catch (error) {
    console.error('‚ùå ERRO GERAL NO TESTE:', error.message);
  }
}

testEventsAccess();