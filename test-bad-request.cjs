const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://ixqhvvvvkqtqjqkqjqkq.supabase.co';
const supabaseKey = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml4cWh2dnZ2a3F0cWpxa3FqcmtxIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDU0NzI2MSwiZXhwIjoyMDUwMTIzMjYxfQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testBadRequest() {
  console.log('üîç TESTE DE BAD REQUEST - SIMULANDO INTERFACE');
  console.log('==============================================');
  
  try {
    // 1. Buscar um paciente existente
    const { data: patients, error: patientsError } = await supabase
      .from('patients')
      .select('*')
      .limit(1);
    
    if (patientsError) {
      console.log('‚ùå Erro ao buscar pacientes:', patientsError);
      return;
    }
    
    if (!patients || patients.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum paciente encontrado');
      return;
    }
    
    const patient = patients[0];
    console.log('üë§ Usando paciente:', patient.name, '(ID:', patient.id + ')');
    
    // 2. Testar diferentes cen√°rios que podem causar bad request
    
    console.log('\nüìù TESTE 1: Evento b√°sico v√°lido');
    const validEvent = {
      patient_id: patient.id,
      type: 'med',
      occurred_at: new Date().toISOString(),
      med_name: 'Dipirona',
      med_dose: '500mg',
      notes: 'Teste b√°sico'
    };
    
    const { data: result1, error: error1 } = await supabase
      .from('events')
      .insert([validEvent])
      .select();
    
    if (error1) {
      console.log('‚ùå ERRO:', error1);
    } else {
      console.log('‚úÖ Sucesso:', result1[0].id);
    }
    
    console.log('\nüìù TESTE 2: Evento com campos nulos');
    const eventWithNulls = {
      patient_id: patient.id,
      type: 'note',
      occurred_at: new Date().toISOString(),
      notes: 'Teste com campos nulos',
      med_name: null,
      med_dose: null,
      volume_ml: null
    };
    
    const { data: result2, error: error2 } = await supabase
      .from('events')
      .insert([eventWithNulls])
      .select();
    
    if (error2) {
      console.log('‚ùå ERRO:', error2);
    } else {
      console.log('‚úÖ Sucesso:', result2[0].id);
    }
    
    console.log('\nüìù TESTE 3: Evento com tipo inv√°lido');
    const invalidTypeEvent = {
      patient_id: patient.id,
      type: 'invalid_type',
      occurred_at: new Date().toISOString(),
      notes: 'Teste tipo inv√°lido'
    };
    
    const { data: result3, error: error3 } = await supabase
      .from('events')
      .insert([invalidTypeEvent])
      .select();
    
    if (error3) {
      console.log('‚ùå ERRO ESPERADO:', error3.message);
    } else {
      console.log('‚úÖ Sucesso inesperado:', result3[0].id);
    }
    
    console.log('\nüìù TESTE 4: Evento sem patient_id');
    const noPatientEvent = {
      type: 'note',
      occurred_at: new Date().toISOString(),
      notes: 'Teste sem paciente'
    };
    
    const { data: result4, error: error4 } = await supabase
      .from('events')
      .insert([noPatientEvent])
      .select();
    
    if (error4) {
      console.log('‚ùå ERRO ESPERADO:', error4.message);
    } else {
      console.log('‚úÖ Sucesso inesperado:', result4[0].id);
    }
    
    console.log('\nüìù TESTE 5: Evento com data inv√°lida');
    const invalidDateEvent = {
      patient_id: patient.id,
      type: 'note',
      occurred_at: 'data-invalida',
      notes: 'Teste data inv√°lida'
    };
    
    const { data: result5, error: error5 } = await supabase
      .from('events')
      .insert([invalidDateEvent])
      .select();
    
    if (error5) {
      console.log('‚ùå ERRO ESPERADO:', error5.message);
    } else {
      console.log('‚úÖ Sucesso inesperado:', result5[0].id);
    }
    
    // Limpar dados de teste
    console.log('\nüßπ Limpando dados de teste...');
    if (result1) {
      await supabase.from('events').delete().eq('id', result1[0].id);
    }
    if (result2) {
      await supabase.from('events').delete().eq('id', result2[0].id);
    }
    
    console.log('\n‚úÖ TESTE CONCLU√çDO');
    
  } catch (err) {
    console.log('‚ùå Erro geral:', err.message);
  }
}

testBadRequest();