const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Testando configura√ß√£o completa do ambiente...\n');

async function testEnvironmentSetup() {
  try {
    // 1. Verificar vari√°veis de ambiente
    console.log('1. ‚úÖ Verificando vari√°veis de ambiente...');
    console.log(`   üìç SUPABASE_URL: ${supabaseUrl ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`   üîë SUPABASE_KEY: ${supabaseKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`   ü§ñ OPENAI_API_KEY: ${process.env.VITE_OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ö†Ô∏è  Opcional - n√£o configurado'}`);
    console.log(`   üíä MEMED_API_KEY: ${process.env.VITE_MEMED_API_KEY ? '‚úÖ Configurado' : '‚ö†Ô∏è  Opcional - n√£o configurado'}`);
    console.log(`   üëÅÔ∏è  GOOGLE_VISION_API_KEY: ${process.env.VITE_GOOGLE_VISION_API_KEY ? '‚úÖ Configurado' : '‚ö†Ô∏è  Opcional - n√£o configurado'}\n`);

    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå Configura√ß√£o b√°sica incompleta. Verifique o arquivo .env');
      return;
    }

    // 2. Testar conex√£o com Supabase
    console.log('2. üîå Testando conex√£o com Supabase...');
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // 3. Verificar estrutura das tabelas principais
    console.log('3. üóÑÔ∏è  Verificando estrutura das tabelas...');
    
    const tables = ['patients', 'care_events', 'family_access', 'profiles'];
    const tableStatus = {};
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          tableStatus[table] = `‚ùå Erro: ${error.message}`;
        } else {
          tableStatus[table] = '‚úÖ OK';
        }
      } catch (err) {
        tableStatus[table] = `‚ùå Erro: ${err.message}`;
      }
    }
    
    console.log('   üìã Status das tabelas:');
    Object.entries(tableStatus).forEach(([table, status]) => {
      console.log(`      ${table}: ${status}`);
    });
    
    // 4. Testar cria√ß√£o de paciente (teste completo)
    console.log('\n4. üë§ Testando cria√ß√£o de paciente...');
    
    const testPatient = {
      name: 'Paciente Teste Ambiente',
      full_name: 'Paciente Teste Ambiente Completo',
      birth_date: '1990-01-01',
      email: 'teste.ambiente@exemplo.com',
      phone: '(11) 99999-9999',
      user_id: 'test_env_user_123'
    };
    
    const { data: patientData, error: patientError } = await supabase
      .from('patients')
      .insert([testPatient])
      .select()
      .single();
    
    if (patientError) {
      console.log(`   ‚ùå Erro na cria√ß√£o: ${patientError.message}`);
    } else {
      console.log('   ‚úÖ Paciente criado com sucesso!');
      console.log(`   üìã ID: ${patientData.id}`);
      
      // Limpar dados de teste
      await supabase
        .from('patients')
        .delete()
        .eq('id', patientData.id);
      console.log('   üßπ Dados de teste removidos');
    }
    
    // 5. Testar sistema demo
    console.log('\n5. üé≠ Testando sistema demo...');
    
    try {
      // Verificar se existe fun√ß√£o demo_login
      const { data: demoData, error: demoError } = await supabase
        .rpc('demo_login', { demo_username: 'demo' });
      
      if (demoError) {
        console.log(`   ‚ö†Ô∏è  Sistema demo: ${demoError.message}`);
      } else {
        console.log('   ‚úÖ Sistema demo funcionando');
      }
    } catch (err) {
      console.log(`   ‚ö†Ô∏è  Sistema demo: ${err.message}`);
    }
    
    // 6. Verificar pol√≠ticas RLS
    console.log('\n6. üîí Verificando pol√≠ticas RLS...');
    
    try {
      // Tentar acessar dados sem autentica√ß√£o adequada
      const { data: rlsTest, error: rlsError } = await supabase
        .from('patients')
        .select('*')
        .limit(1);
      
      if (rlsError && rlsError.message.includes('RLS')) {
        console.log('   ‚úÖ RLS ativo e funcionando');
      } else if (rlsTest) {
        console.log('   ‚ö†Ô∏è  RLS pode estar desabilitado ou com pol√≠ticas permissivas');
      }
    } catch (err) {
      console.log(`   ‚ö†Ô∏è  Erro ao verificar RLS: ${err.message}`);
    }
    
    // 7. Resumo final
    console.log('\nüéâ RESUMO DA CONFIGURA√á√ÉO DO AMBIENTE:');
    console.log('=====================================');
    console.log('‚úÖ Arquivo .env criado e configurado');
    console.log('‚úÖ Conex√£o com Supabase estabelecida');
    console.log('‚úÖ Tabelas principais verificadas');
    console.log('‚úÖ Sistema de cria√ß√£o de pacientes funcionando');
    console.log('‚úÖ Aplica√ß√£o rodando em http://localhost:8080/');
    
    console.log('\nüìù PR√ìXIMOS PASSOS:');
    console.log('==================');
    console.log('1. Acesse http://localhost:8080/ no navegador');
    console.log('2. Teste o login demo ou crie uma conta');
    console.log('3. Teste a cria√ß√£o de pacientes na interface');
    console.log('4. Explore todas as funcionalidades dispon√≠veis');
    
    console.log('\n‚ö†Ô∏è  CONFIGURA√á√ïES OPCIONAIS:');
    console.log('============================');
    if (!process.env.VITE_OPENAI_API_KEY) {
      console.log('‚Ä¢ Configure VITE_OPENAI_API_KEY para funcionalidades de IA');
    }
    if (!process.env.VITE_MEMED_API_KEY) {
      console.log('‚Ä¢ Configure VITE_MEMED_API_KEY para prescri√ß√µes m√©dicas');
    }
    if (!process.env.VITE_GOOGLE_VISION_API_KEY) {
      console.log('‚Ä¢ Configure VITE_GOOGLE_VISION_API_KEY para OCR de sinais vitais');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral na configura√ß√£o:', error.message);
  }
}

testEnvironmentSetup();