const { createClient } = require('@supabase/supabase-js');

// Novas configura√ß√µes do banco de dados
const SUPABASE_URL = 'http://supabasekong-o48k40w0koggco4ocok4gs0o.31.97.64.167.sslip.io';
const SUPABASE_ANON_KEY = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc1NzM2MDgyMCwiZXhwIjo0OTEzMDM0NDIwLCJyb2xlIjoiYW5vbiJ9.mDC5HL6lFytb7Y0lowHRS0PBiQwpFXxXfIBe3UNx6oA';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testDatabaseConnection() {
  console.log('üîç Testando conectividade com o novo banco de dados...\n');
  console.log('URL:', SUPABASE_URL);
  console.log('Chave:', SUPABASE_ANON_KEY.substring(0, 20) + '...\n');

  try {
    // 1. Teste b√°sico de conectividade
    console.log('1. Testando conectividade b√°sica...');
    const { data: healthCheck, error: healthError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);

    if (healthError) {
      console.error('‚ùå Erro na conectividade b√°sica:', healthError);
      return false;
    }
    console.log('‚úÖ Conectividade b√°sica funcionando');

    // 2. Verificar tabelas principais
    console.log('\n2. Verificando tabelas principais...');
    
    const tables = [
      'profiles',
      'patients', 
      'medical_records',
      'medical_diagnoses',
      'medical_exams',
      'care_events'
    ];

    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('count')
          .limit(1);

        if (error) {
          console.error(`‚ùå Tabela ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela ${table}: acess√≠vel`);
        }
      } catch (err) {
        console.error(`‚ùå Tabela ${table}: erro de conex√£o`);
      }
    }

    // 3. Testar opera√ß√µes CRUD b√°sicas
    console.log('\n3. Testando opera√ß√µes CRUD...');
    
    // Teste de SELECT
    const { data: selectTest, error: selectError } = await supabase
      .from('profiles')
      .select('id, full_name')
      .limit(3);

    if (selectError) {
      console.error('‚ùå Erro no SELECT:', selectError);
    } else {
      console.log('‚úÖ SELECT funcionando');
      console.log(`   Encontrados ${selectTest?.length || 0} registros em profiles`);
    }

    // 4. Verificar autentica√ß√£o
    console.log('\n4. Testando sistema de autentica√ß√£o...');
    const { data: authData, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.error('‚ùå Erro na autentica√ß√£o:', authError);
    } else {
      console.log('‚úÖ Sistema de autentica√ß√£o acess√≠vel');
      console.log('   Sess√£o atual:', authData.session ? 'Ativa' : 'N√£o autenticado');
    }

    // 5. Testar RLS (Row Level Security)
    console.log('\n5. Testando pol√≠ticas RLS...');
    const { data: rlsTest, error: rlsError } = await supabase
      .from('medical_records')
      .select('id, status')
      .limit(1);

    if (rlsError) {
      console.log('‚ö†Ô∏è  RLS ativo (esperado sem autentica√ß√£o):', rlsError.message);
    } else {
      console.log('‚úÖ Acesso a medical_records:', rlsTest?.length || 0, 'registros');
    }

    console.log('\nüéâ Teste de conectividade conclu√≠do com sucesso!');
    return true;

  } catch (error) {
    console.error('‚ùå Erro geral na conectividade:', error);
    return false;
  }
}

testDatabaseConnection();
